[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform float width : hint_range(0.01, 30.0);
uniform vec4 outline_color : hint_color;

void fragment()
{
	float size = width * 1.0 / float(textureSize(TEXTURE, 0).x);
	vec4 sprite_color = texture(TEXTURE, UV);
	float alpha = -8.0 * sprite_color.a;
	alpha += texture(TEXTURE, UV + vec2(size,  0.0)).a;
	alpha += texture(TEXTURE, UV + vec2(-size, 0.0)).a;
	alpha += texture(TEXTURE, UV + vec2(0.0,  size)).a;
	alpha += texture(TEXTURE, UV + vec2(0.0, -size)).a;
	alpha += texture(TEXTURE, UV + vec2(size,  -size)).a;
	alpha += texture(TEXTURE, UV + vec2(-size, size)).a;
	alpha += texture(TEXTURE, UV + vec2(size,  size)).a;
	alpha += texture(TEXTURE, UV + vec2(-size, -size)).a;
	alpha = AlfaCalculate(TEXTURE, UV, 4, size);
	COLOR = vec4(outline_color.rgb, abs(alpha));
}

float AlfaCalculate(sampler2D text, vec2 uv, int stepCount, float size)
{
	float alpha = 0.0;
	float sCount = float(stepCount);
	float StepSize = 2.0 /sCount;
	for (int aStep1 = 0; aStep1 < stepCount; aStep1++)
	{
		for (int aStep2 = 0; aStep2 < stepCount; aStep2++)
		{
			alpha += texture(text, uv + vec2(size * (float(aStep1) * StepSize - 1.0), size * (float(aStep2) * StepSize - 1.0))).a;
		}
	}
	return alpha;
}"
